// tslint:disable: no-bitwise
export class MapleColorHelper {
    static getContrastColor(hexColor) {
        if (!hexColor) {
            return '';
        }
        let hex = hexColor.replace('#', '');
        if (hex.length === 3) {
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
        }
        const r = parseInt(hex.substr(0, 2), 16);
        const g = parseInt(hex.substr(2, 2), 16);
        const b = parseInt(hex.substr(4, 2), 16);
        const yiq = (r * 299 + g * 587 + b * 114) / 1000;
        return yiq >= 128 ? '#000' : '#fff';
    }
    static alpha2hex(alpha) {
        alpha = ((1 << 8) + Math.round(parseFloat(alpha) * 255))
            .toString(16)
            .slice(1);
        return alpha === 'ff' ? '' : alpha;
    }
    static hex8(hex, opacity = 1) {
        return `#${MapleColorHelper.hex2Short(hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (m, r, g, b) => '#' + r + r + g + g + b + b) + MapleColorHelper.alpha2hex(opacity.toString()))}`;
    }
    static hex2Short(hex) {
        if (hex.length > 6) {
            const hexArr = hex.replace('#', '').split('');
            return hexArr[0] === hexArr[1] &&
                hexArr[2] === hexArr[3] &&
                hexArr[4] === hexArr[5] &&
                hexArr[6] === hexArr[7]
                ? hexArr[0] + hexArr[2] + hexArr[4] + (hexArr[6] || '')
                : hexArr.join('');
        }
        return hex;
    }
    static generateAlphaColors(color) {
        Object.keys(color)
            .filter((key) => color[key].charAt(0) === '#' && key !== 'transparent')
            .forEach((key) => {
            [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1].forEach((opacity) => {
                color[`${key}-${opacity * 100}`] = MapleColorHelper.hex8(color[key], opacity);
            });
        });
        return color;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWFwbGUvIiwic291cmNlcyI6WyJoZWxwZXJzL2NvbG9yLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IsTUFBTSxPQUFPLGdCQUFnQjtJQUNwQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBZ0I7UUFDN0MsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNwQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzRDtRQUNELE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7UUFD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TCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOiBuby1iaXR3aXNlXG5leHBvcnQgY2xhc3MgTWFwbGVDb2xvckhlbHBlciB7XG4gIHB1YmxpYyBzdGF0aWMgZ2V0Q29udHJhc3RDb2xvcihoZXhDb2xvcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIWhleENvbG9yKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGxldCBoZXggPSBoZXhDb2xvci5yZXBsYWNlKCcjJywgJycpO1xuICAgIGlmIChoZXgubGVuZ3RoID09PSAzKSB7XG4gICAgICBoZXggPSBoZXhbMF0gKyBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl07XG4gICAgfVxuICAgIGNvbnN0IHIgPSBwYXJzZUludChoZXguc3Vic3RyKDAsIDIpLCAxNik7XG4gICAgY29uc3QgZyA9IHBhcnNlSW50KGhleC5zdWJzdHIoMiwgMiksIDE2KTtcbiAgICBjb25zdCBiID0gcGFyc2VJbnQoaGV4LnN1YnN0cig0LCAyKSwgMTYpO1xuICAgIGNvbnN0IHlpcSA9IChyICogMjk5ICsgZyAqIDU4NyArIGIgKiAxMTQpIC8gMTAwMDtcbiAgICByZXR1cm4geWlxID49IDEyOCA/ICcjMDAwJyA6ICcjZmZmJztcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYWxwaGEyaGV4KGFscGhhOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGFscGhhID0gKCgxIDw8IDgpICsgTWF0aC5yb3VuZChwYXJzZUZsb2F0KGFscGhhKSAqIDI1NSkpXG4gICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAuc2xpY2UoMSk7XG4gICAgcmV0dXJuIGFscGhhID09PSAnZmYnID8gJycgOiBhbHBoYTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaGV4OChoZXg6IHN0cmluZywgb3BhY2l0eTogbnVtYmVyID0gMSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAjJHtNYXBsZUNvbG9ySGVscGVyLmhleDJTaG9ydChcbiAgICAgIGhleC5yZXBsYWNlKFxuICAgICAgICAvXiM/KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pJC9pLFxuICAgICAgICAobSwgciwgZywgYikgPT4gJyMnICsgciArIHIgKyBnICsgZyArIGIgKyBiLFxuICAgICAgKSArIE1hcGxlQ29sb3JIZWxwZXIuYWxwaGEyaGV4KG9wYWNpdHkudG9TdHJpbmcoKSksXG4gICAgKX1gO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBoZXgyU2hvcnQoaGV4OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChoZXgubGVuZ3RoID4gNikge1xuICAgICAgY29uc3QgaGV4QXJyID0gaGV4LnJlcGxhY2UoJyMnLCAnJykuc3BsaXQoJycpO1xuICAgICAgcmV0dXJuIGhleEFyclswXSA9PT0gaGV4QXJyWzFdICYmXG4gICAgICAgIGhleEFyclsyXSA9PT0gaGV4QXJyWzNdICYmXG4gICAgICAgIGhleEFycls0XSA9PT0gaGV4QXJyWzVdICYmXG4gICAgICAgIGhleEFycls2XSA9PT0gaGV4QXJyWzddXG4gICAgICAgID8gaGV4QXJyWzBdICsgaGV4QXJyWzJdICsgaGV4QXJyWzRdICsgKGhleEFycls2XSB8fCAnJylcbiAgICAgICAgOiBoZXhBcnIuam9pbignJyk7XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdlbmVyYXRlQWxwaGFDb2xvcnMoY29sb3I6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgT2JqZWN0LmtleXMoY29sb3IpXG4gICAgICAuZmlsdGVyKChrZXkpID0+IGNvbG9yW2tleV0uY2hhckF0KDApID09PSAnIycgJiYga2V5ICE9PSAndHJhbnNwYXJlbnQnKVxuICAgICAgLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBbMC45LCAwLjgsIDAuNywgMC42LCAwLjUsIDAuNCwgMC4zLCAwLjIsIDAuMV0uZm9yRWFjaCgob3BhY2l0eSkgPT4ge1xuICAgICAgICAgIGNvbG9yW2Ake2tleX0tJHtvcGFjaXR5ICogMTAwfWBdID0gTWFwbGVDb2xvckhlbHBlci5oZXg4KFxuICAgICAgICAgICAgY29sb3Jba2V5XSxcbiAgICAgICAgICAgIG9wYWNpdHksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cbiJdfQ==