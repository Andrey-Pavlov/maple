/// Creates a utilitiy class selector by using
/// @param {String} $utility-map - Utility map
/// @param {String} $type - Type of the utility class
/// @param {String} $bp - A breakpoint that will be included in the class. e.g. sm, md...
/// @return {String} - A utility class selector
@function get-utility-selector($utility-map, $type, $bp: null, $whitelist) {
  $prefix: map-get($utility-map, "_prefix");
  $innerSelectors: map-get($utility-map, "_inner-selector");
  $outerSelectors: map-get($utility-map, "_outer-selector");
  $selectors: ();
  $utility-class-whitelist: map-get($whitelist, "utility-classes");
  $prefix-whitelist: map-get($whitelist, "prefixes");

  @each $outerSelector in $outerSelectors {
    @each $innerSelector in $innerSelectors {
      $selector: null;

      @if $type == $bp {
        @if index($prefix-whitelist, #{$prefix}) {
          $selector: #{$outerSelector} + " ." + #{$prefix} +  #{$innerSelector};
        }
      }
      @else if $bp {
        $utilityClass: #{$prefix} + "-" + #{$type} + "-" + #{$bp};

        @if index($prefix-whitelist, #{$prefix}) or index($utility-class-whitelist, $utilityClass) {
          $selector: #{$outerSelector} + " ." + #{$utilityClass} + #{$innerSelector};
        }
      }
      @else {
        $utilityClass: #{$prefix} + "-" + #{$type};

        @if index($prefix-whitelist, #{$prefix}) or index($utility-class-whitelist, $utilityClass) {
          $selector: #{$outerSelector} + " ." + #{$utilityClass}  + #{$innerSelector};
        }
      }

      @if $selector != null {
        $selectors: append($selectors, $selector);
      }
    }
  }

  @return join($selectors, (), $separator: comma, $bracketed: false);
}

/// Creates a selector by using `_outer-selector` and `_inner-selector` of a prop-map
/// @param {String} $utility-map - Utility map
/// @return {String} - A selector
@function get-default-selector($utility-map, $map-name) {
  $innerSelectors: map-get($utility-map, "_inner-selector");

  @if $innerSelectors == null {
    @error "_inner-selector should be defined on utility map: $#{$map-name}";
  }

  $outerSelectors: map-get($utility-map, "_outer-selector");
  $selectors: ();

  @each $outerSelector in $outerSelectors {
    @each $innerSelector in $innerSelectors {
      $selectors: append($selectors, #{$outerSelector} + " " + #{$innerSelector});
    }
  }

  @return join($selectors, (), $separator: comma, $bracketed: false);
}
