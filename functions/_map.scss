/// Merges multidimensional maps recursively
/// @param {Map} $map1 - Base map
/// @param {Map} $map2 - A map that will be merged on base map
/// @return {Map} - Merged map
@function map-recursive-merge($map1, $map2) {
  @if ((type-of($map1) == map or type-of($map1) == list) and (type-of($map2) == map or type-of($map2) == list)) {
    $result: $map1;

    @each $key, $value in $map2 {
      @if (type-of(map-get($result, $key)) == map and type-of($value) == map) {
        $result: map-merge($result, ($key: map-recursive-merge(map-get($result, $key), $value)));
      }
      @else {
        $result: map-merge($result, ($key: $value));
      }
    }

    @return $result;
  }
  @else {
    @warn "map-recursive-merge() expects it\'s parameters to be map types!";

    @return null;
  }
}

/// Merges multiple maps into single one
/// @param {Map[]} $maps - Arg list having multipe map items
/// @return {Map} - Merged map
@function map-collect($maps...) {
  $collection: ();

  @each $map in $maps {
    $collection: map-merge($collection, $map);
  }

  @return $collection;
}

/// Merges multidimensional multiple maps into single one
/// @param {Map[]} $maps - Arg list having multipe map items
/// @return {Map} - Merged map
@function map-recursive-collect($maps...) {
  $collection: ();

  @each $map in $maps {
    $collection: map-recursive-merge($collection, $map);
  }

  @return $collection;
}
